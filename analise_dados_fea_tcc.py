# -*- coding: utf-8 -*-
"""Analise_dados_FEA_TCC

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-xipbzSQjVajqS83qXBzQl57EALFlnkW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
!pip install seaborn
import seaborn as sns
from google.colab import auth
auth.authenticate_user()
import gspread
from oauth2client.client import GoogleCredentials

def converte_para_numero(Serie_original):
  for i in range(Serie_original.shape[0]):
    if Serie_original.values[i] == '':
      Serie_original.values[i] = 0 
    a = float(Serie_original.values[i])
    Serie_original[i] = a

def constroi_dict (dict_):
    keys_list = []
    values_list = []
    for keys, values in dict_.items():
      keys_list.append(keys)
      values_list.append(dict_[keys])
    dicionario = {'Aços':keys_list,'Classificação':values_list}
    data = pd.DataFrame.from_dict(dicionario)
    return data
  
def virgula_ponto(Serie_original):
  for i in range(Serie_original.shape[0]):
    if ',' in Serie_original[i]:
      Serie_original[i] = Serie_original[i].replace(',','.')

def remove_espaci(Serie_original):
  for i in range(Serie_original.shape[0]):
    if ' ' in Serie_original[i]:
         Serie_original[i] = Serie_original[i].strip()

def remove_parentese(Serie_original):
  for i in range(Serie_original.shape[0]):
    if '(' in Serie_original[i]:
         Serie_original[i] = Serie_original[i].replace('(','')
         Serie_original[i] = Serie_original[i].replace(')','')

def converte_para_numero2(Serie_original):
  for i in range(Serie_original.shape[0]):
    if Serie_original[i] == "":
      Serie_original[i] = 0
    elif '.' in Serie_original[i]:
      Serie_original[i] = Serie_original[i].replace('.','')
      Serie_original[i] = Serie_original[i].replace(',','.')
      Serie_original[i] = float(Serie_original[i])
    else:
      Serie_original[i] = Serie_original[i].replace(',','.')
      Serie_original[i] = float(Serie_original[i])


def e_nulo(Serie_original):
  aux = []
  for i in range(Serie_original.shape[0]):
    if Serie_original[i] == 0:
      aux.append(False)
    else:
      aux.append(True)
  return aux

gc = gspread.authorize(GoogleCredentials.get_application_default())
worksheet = gc.open('Composição Quimica de Escória').sheet1
rows = worksheet.get_all_values()
escoria = pd.DataFrame(rows)
worksheet = gc.open('Base de Dados - FEA').sheet1
rows = worksheet.get_all_values()
FEA = pd.DataFrame(rows)
FEA.shape

FEA.head()

FEA.tail()

dict_aux = {}
for i in range(FEA.shape[1]):
  dict_aux[FEA.columns[i]] = FEA[0:1][:][i].values[0]

FEA.rename(columns = dict_aux,inplace = True)
FEA.drop(0,inplace = True)
FEA.reset_index(inplace = True)
FEA.drop(labels = 'index',axis = 'columns',inplace = True)

FEA_1 = FEA[FEA['Carregamento Cesto 4'].notna()]

FEA_1

"""## Como o cesto 4 não apresenta muitos valores, as corridas que tiveram 4 cestos serão removidas o atributo Cesto 4 tbm"""

FEA_1.drop(['Carregamento Cesto 4','Ordem Produção',
            'Hora Inicio Forno',
            'Hora Fim do Forno',
            'Troca de Eletrodo\r\nFase',
            'Peso do Eletrodo (kg)',
            'Comprimento Oxidado (m)\r\nFase A',
            'Comprimento Oxidado (m)\r\nFase B',
            'Comprimento Oxidado (m)\r\nFase C',
            'Consumo Lateral [kg/t]',
            'Chamote EBT (kg)\r\nS731008'], axis = 'columns', inplace = True)

"""## Devido a não conter valores as informações relativas ao eletrodo e o chamote EBT foram removidas. Foram removidos também os valores de inicio e fim de forno e a OP"""

FEA_1.rename(columns={'Aço Produzido':'Aco'},inplace = True)

FEA_1['Aco'].unique()
FEA_1 = FEA_1[FEA_1['Aco']!='']
FEA_1.reset_index(inplace = True)
FEA_1.drop(labels = 'index',axis = 'columns',inplace = True)

acos = {'1032'    :'Comum',
        'ABNT1012':'Intermediario',
        'AM60B'   :'Intermediario',
        '1016-B'  :'Especial',
        '1421'    :'Especial',
        '1515-B'  :'Especial',
        '1622-A'  :'Intermediario',
        '1030-D'  :'Comum',
        '1045'    :'Especial',
        '5160'    :'Especial',
        'ABNT1008':'Intermediario',
        'ABNT1006':'Intermediario',
        '10B06'   :'Especial', 
        '10B16'   :'Especial',
        'MV20B'   :'Intermediario',
        '1008'    :'Intermediario',
        'ABNT1010':'Intermediario',
        '1622A'   :'Intermediario',
        '1020'    :'Especial', 
        'MB16 ESP':'Especial',
        '1012'    :'Intermediario',
        '1016(A3)':'Intermediario', 
        '1016 MOD':'Intermediario'}

auxiliar = constroi_dict(acos)

FEA_1['Aco'].unique()

FEA_1['Classification'] = ""
for i in range(FEA_1.shape[0]):
  FEA_1['Classification'][i] = acos[FEA_1['Aco'][i]]

converte_para_numero(FEA_1['Calcitica (kg) 7071955'])
converte_para_numero(FEA_1['Dolomitica (kg) 7071957'])

FEA_1 = FEA_1[FEA_1['Calcitica (kg) 7071955']>0]
FEA_1 = FEA_1[FEA_1['Dolomitica (kg) 7071957']>0]
FEA_1.reset_index(inplace=True)
FEA_1.drop(columns = ['index'],inplace = True)

FEA_1.shape

FEA_1['Cales_total_kg'] = FEA_1['Calcitica (kg) 7071955'] + FEA_1['Dolomitica (kg) 7071957']

sns.boxplot(x = 'Classification',y = 'Calcitica (kg) 7071955',data = FEA_1)
plt.ylim([0,8500])
plt.title('Adição de cal calcítica por classe de aço \n',fontsize = 14)
plt.ylabel('Adição de cal calcítica (kg) \n',fontsize = 12)
plt.xlabel('\n Classificação',fontsize=12)
plt.show

sns.boxplot(x = 'Classification',y = 'Dolomitica (kg) 7071957',data = FEA_1)
plt.ylim([1479,1481])
plt.title('Adição de cal dolomítica por classe de aço \n',fontsize = 14)
plt.ylabel('Adição de cal dolomítica (kg) \n',fontsize = 12)
plt.xlabel('\n Classificação',fontsize=12)
plt.show

lista_1 = list(FEA_1['Dolomitica (kg) 7071957'])
lista_unicos = list(FEA_1['Dolomitica (kg) 7071957'].unique())

dc = {}
aux1 = []
aux2 = []
for elemento in lista_unicos:
   aux1.append(elemento)
   aux2.append(lista_1.count(elemento))
   dc = {'Valor':aux1,'Frequencia':aux2}
df_aux = pd.DataFrame.from_dict(dc)
df_aux.to_csv('Auxiliar_df.csv',index = False)

np.quantile(FEA_1['Dolomitica (kg) 7071957'],0.75)

FEA_1['Cal_total'] = FEA_1['Calcitica (kg) 7071955']+FEA_1['Dolomitica (kg) 7071957']

sns.boxplot(x = 'Classification',y = 'Cal_total',data = FEA_1)
plt.ylim([2000,9000])
plt.title('Adição de cal total por classe de aço \n',fontsize = 14)
plt.ylabel('Adição de cal total (kg) \n',fontsize = 12)
plt.xlabel('\n Classificação',fontsize=12)
plt.show

"""Nota-se que que os aços comuns apresentam-se com uma dispersão de valores mais controlada e com um consumo menor de cal. No caso dos aços classificados como intermediários apresentam valores superiores aos aços comuns, e com uma dispersão maior. No caso dos aços especiais, existe uma maior dispersão de valores quando comparados com os demais aços e também um consumo maior, visto que uma parcela significativa dos dados da base de dados se apresenta bem acima dos aços intermediários, e como consequência dos aços especiais."""

acos_comuns = FEA_1[FEA_1['Classification'] == 'Comum']

acos_intermediarios = FEA_1[FEA_1['Classification'] == 'Intermediario']

acos_especiais = FEA_1[FEA_1['Classification'] == 'Especial']

acos_comuns.shape

acos_especiais.shape

acos_intermediarios.shape

round(acos_comuns.shape[0]/FEA_1.shape[0]*100,2)

acos_comuns.reset_index(inplace = True)
  acos_comuns.drop(labels = 'index',axis = 'columns')
  acos_comuns

q1 = np.quantile(acos_comuns['Cal_total'],0.25)
q3 = np.quantile(acos_comuns['Cal_total'],0.75)
Iq = q3-q1
limite_inf = q1-Iq*1.5
limite_sup = q3+Iq*1.5
[limite_inf,limite_sup]

q3

acos_comuns_sem_outliers = acos_comuns[acos_comuns['Cal_total'] >= 2911.5]
acos_comuns_sem_outliers = acos_comuns_sem_outliers[acos_comuns_sem_outliers['Cal_total']<=4907.5]
acos_comuns_sem_outliers.reset_index(inplace = True)
acos_comuns_sem_outliers.drop(labels = ['index','level_0'],axis = 'columns',inplace = True)

acos_comuns_sem_outliers

sns.boxplot(x = 'Coating de Panela', y = 'Cal_total', data = acos_comuns_sem_outliers)
plt.title('Consumo de cal total para as condições de coating possíveis \n',fontsize = 14)
plt.xlabel('\n Condição do coating',fontsize = 12)
plt.ylabel('Consumo de cal total (kg)\n',fontsize = 12)
plt.show

FEA_1.columns

Atributos = ['kg SiO2 esperada /t', 'kg SiO2 extra /t', 'Peso Carregado (t/cor)',
       'Carregamento Cesto 1', 'Carregamento Cesto 2', 'Carregamento Cesto 3',
       'GUSS (t/cor)', 'SHRE (t/cor)', 'Gusa Eqv.', 'O2 / GUSSEQ',
       'Densidade Teórica [t/m³]', 'Rendimento Teórico %', 'RM sem Ligas %',
       'RM com Ligas FE/FP %', 'Número de Carregamentos',
       'TAP to TAP (min/corr)', 'T.F.Ligado (min/corr)',
       'Power Off (min/corr)', 'Power Off Bruto (min/corr)',
       'Produtividade (t/h)', 'Aço Líquido Vazado (t/cor)',
       'Produção de Tarugos (t/corr)', 'Consumo de Energia Elétrica (MWh/cor)',
       'Consumo de Energia Elétrica (kWh/t)', 'Potência (MW)',
       '%FeO na escória FEA', '%SiO2 na escória FEA', '%CaO na escória FEA',
       'Basicidade', '%FeO na escória BAIA', '%SiO2 na escória BAIA',
       'Basicidade BAIA', 'Peso Escória (kg/t)', 'Oxigênio FEA (m³/t)', 
       'Oxigênio PC (Nm³)',  'Gás Natural (Nm³)',
       'Gás Natural (m³/t)', 'Pé Liquido (t) Estimado',
       'Pé Liquido (t) Corrigido', 'PPM O2 vazamento',
       'Vida de Canal EBT (nº corridas)', 'Vida Miolo (Delta) (nº corridas)',
       'Panela', 'Vida (n° corridas)', 'Corrente A [kA]', 'Corrente B [kA]',
       'Corrente C [kA]', 'Consumo de Eletrodo Teórico [kg/t]',
       'Consumo de Ponta [kg/t]', 'I²t', 'Escorificante FEA [kg/t]',
       'FeSiMn (kg)\r\n7071931', 'FeSiMn saco (kg)', 'CaF2 (kg) \r\n4059595',
       'FeSI 75 (kg)\r\n7071923', 'Coque Correção (kg)\r\n8800075',
       'FeSiMn fino (kg)\r\n7071930', 'SiC (kg)\r\n28736',
       'CaC2  (kg)\r\n7070998', 'Grafite BN (kg)\r\n7071938',
       'FeB (kg)\r\n7071926', 'Coque Bag PPC (kg)\r\n7071997',
       'CaSi (kg)\r\n7071935', 'CaSi Granulado (kg)\r\n7071936',
       'FeV (kg)\r\n7071932', 'Alumínio Barra (kg)\r\n28685',
       'FeNb (kg)\r\n7071977 ', 'Grafite saquinho (kg)\r\n7072675',
       'Coque verde Injetado (kg)\r\n7071998', 'FeCr (kg)\r\n7071970',
       'CaF2 saco (kg)\r\n7071924']

for atributo in Atributos:
  virgula_ponto(acos_comuns_sem_outliers[atributo])
  remove_espaci(acos_comuns_sem_outliers[atributo])
  remove_parentese(acos_comuns_sem_outliers[atributo])
  converte_para_numero(acos_comuns_sem_outliers[atributo])

acos_comuns_sem_outliers[ Atributos[35]].unique()

Atributos[35]

Atributos_2 = ['Coque Injetado [kg]','Temperatura de Vazamento Forno (°C)','Oxigênio (Nm³)','Oxigênio Lança (Nm³)','Oxigênio Queima (Nm³)']

for atributo in Atributos_2:
  converte_para_numero2(acos_comuns_sem_outliers[atributo])

atributos_float = Atributos_2+Atributos

aux = []
for atributo in atributos_float:
  fig = plt.figure()
  fig = sns.scatterplot(x = 'Cal_total', y = atributo,data = acos_comuns_sem_outliers)
  aux.append(fig)

acos_comuns_sem_outliers_2 = acos_comuns_sem_outliers.drop(['CaF2 saco (kg)\r\n7071924','Alumínio Barra (kg)\r\n28685','FeCr (kg)\r\n7071970','FeNb (kg)\r\n7071977 ','Grafite saquinho (kg)\r\n7072675',
                                                            'FeV (kg)\r\n7071932','CaSi Granulado (kg)\r\n7071936','CaSi (kg)\r\n7071935','Coque Bag PPC (kg)\r\n7071997','CaF2 (kg) \r\n4059595',
                                                            'CaC2  (kg)\r\n7070998','SiC (kg)\r\n28736','FeSiMn fino (kg)\r\n7071930','Coque Correção (kg)\r\n8800075','Oxigênio PC (Nm³)','FeB (kg)\r\n7071926',
                                                            'Grafite BN (kg)\r\n7071938','FeSiMn saco (kg)'],axis = 'columns')

lista_aux = []
for atributo in acos_comuns_sem_outliers.columns:
  lista_aux.append(e_nulo(acos_comuns_sem_outliers[atributo]))

aux = []
for atributo in acos_comuns_sem_outliers_2.columns:
  fig = plt.figure()
  fig = sns.scatterplot(x = 'Cal_total', y = atributo,data = acos_comuns_sem_outliers)
  aux.append(fig)

sns.relplot(x = 'Cal_total', y = '%CaO na escória FEA',data = acos_comuns_sem_outliers[lista_aux[33]])
plt.ylim([0,50])

colunas = {}
for i in range(len(acos_comuns_sem_outliers.columns)):
  colunas[i] = acos_comuns_sem_outliers.columns[i]

colunas

for i in range(acos_comuns_sem_outliers.shape[1]):
  fig = plt.figure()
  fig = sns.scatterplot(x = 'Cal_total', y = colunas[i],data = acos_comuns_sem_outliers[lista_aux[i]],hue = 'Aco')
  aux.append(fig)

import statsmodels.api as sm

lista  = []
cal_total_lista = []
for coluna in acos_comuns_sem_outliers.columns:
    aux = []
    aux2 = []
    for i in range(acos_comuns_sem_outliers.shape[0]):
      if acos_comuns_sem_outliers[coluna].values[i] == 0:
        continue
      aux2.append((acos_comuns_sem_outliers['Cal_total'].values[i]))
      aux.append(acos_comuns_sem_outliers[coluna].values[i])
    lista.append(aux)
    cal_total_lista.append(aux2)



for i in range(6,len(lista)):
  if cal_total_lista[i] == []:
    continue
  if i == 49 or i==85:
    continue
  X = cal_total_lista[i]
  X = np.array(X)
  X = X.astype(float)
  X = sm.add_constant(X)
  Y = lista[i]
  Y = np.array(Y)
  Y = Y.astype(float)
  print('x = '+ colunas[i]+'y = '+ colunas[87])
  modelo = sm.OLS(Y,X)
  resultado = modelo.fit()
  print(resultado.summary())



colunas

cal_total_lista[82]

colunas

fig = plt.figure()
fig = sns.scatterplot(x = 'Cal_total', y = colunas[62],data = acos_comuns_sem_outliers[lista_aux[62]],hue = 'Aco')
plt.title("Consumo de Escorificante x Consumo de cal total \n",fontsize = 14)
plt.xlabel("\n Consumo de cal total (kg)",fontsize = 12)
plt.ylabel(" Consumo de Escorificante (kg/t) \n",fontsize = 12)

"""# Análise de dados escória"""

worksheet = gc.open('Composição Quimica de Escória').sheet1
rows = worksheet.get_all_values()
escoria = pd.DataFrame(rows)
escoria.shape

escoria.head()

escoria[:][1:2].values

lista_colunas_escoria = ['Mês', 'Data', 'Corrida', 'Grau Aço', 'S', 'Al2O3', 'BAS', 'CaO',
        'Cr2O3', 'F', 'FeO', 'MgO', 'MnO', 'P2O5', 'RESIDUAL', 'SiO2',
        'TOTAL', 'TiO2']

len(lista_colunas_escoria)
#escoria.shape[1]

aux_dc = {}
for i in range(len(lista_colunas_escoria)):
  aux_dc[i] = lista_colunas_escoria[i]

escoria.rename(aux_dc,axis = 'columns',inplace = True)
escoria.drop([0,1],inplace = True)
escoria.set_axis(range(escoria.shape[0]),axis = 'index',inplace = True)

escoria['Classification'] = ''
for i in range(escoria.shape[0]):
  if escoria['Grau Aço'][i] in acos:
    escoria['Classification'][i] = acos[escoria['Grau Aço'][i]]

escoria

dc_corrida_turma = {}
dc_corrida_cal_total = {}
dc_corrida_acov_total = {}
dc_corrida_energia = {}
dc_corrida_cal = {}
dc_corrida_dol = {}
dc_corrida_o2 = {}
dc_corrida_tfl = {}
dc_corrida_pot = {}
dc_corrida_coat = {}
for i in range(FEA_1.shape[0]):
  dc_corrida_turma[FEA_1['Corrida MES'][i]] = FEA_1['Turma'][i]
  dc_corrida_cal_total[FEA_1['Corrida MES'][i]] = FEA_1['Cal_total'][i]
  dc_corrida_acov_total[FEA_1['Corrida MES'][i]] = FEA_1['Aço Líquido Vazado (t/cor)'][i]
  dc_corrida_energia[FEA_1['Corrida MES'][i]] = FEA_1['Consumo de Energia Elétrica (kWh/t)'][i]
  dc_corrida_cal[FEA_1['Corrida MES'][i]] = FEA_1['Calcitica (kg) 7071955'][i]
  dc_corrida_dol[FEA_1['Corrida MES'][i]] = FEA_1['Dolomitica (kg) 7071957'][i]
  dc_corrida_o2[FEA_1['Corrida MES'][i]] = FEA_1['PPM O2 vazamento'][i]
  dc_corrida_tfl[FEA_1['Corrida MES'][i]] = FEA_1['T.F.Ligado (min/corr)'][i]
  dc_corrida_pot[FEA_1['Corrida MES'][i]] = FEA_1['Potência (MW)'][i]
  dc_corrida_coat[FEA_1['Corrida MES'][i]] = FEA_1['Coating de Panela'][i]

escoria['Turma'] = ''
escoria['Cal_total'] = ''
escoria['aco_vazado_t'] = ''
escoria['energia_kwh/t'] = ''
escoria['calcitica_kg'] = ''
escoria['dolomitica_kg'] = ''
escoria['o2_ppm'] = ''
escoria['tempo_forno_ligado_minutos'] =''
escoria['potencia_MW'] = ''
escoria['coating'] = ''
for i in range(escoria.shape[0]):
  if escoria['Corrida'][i] in [FEA_1['Corrida MES'][k] for k in range(FEA_1.shape[0])]:
    escoria['Turma'][i] = dc_corrida_turma[escoria['Corrida'][i]]
    escoria['Cal_total'][i] = dc_corrida_cal_total[escoria['Corrida'][i]]
    escoria['aco_vazado_t'][i] = dc_corrida_acov_total[escoria['Corrida'][i]]
    escoria['energia_kwh/t'][i] = dc_corrida_energia[escoria['Corrida'][i]]
    escoria['calcitica_kg'][i] = dc_corrida_cal[escoria['Corrida'][i]]
    escoria['dolomitica_kg'][i] = dc_corrida_dol[escoria['Corrida'][i]]
    escoria['o2_ppm'][i] = dc_corrida_o2[escoria['Corrida'][i]]
    escoria['tempo_forno_ligado_minutos'][i] = dc_corrida_tfl[escoria['Corrida'][i]]
    escoria['potencia_MW'][i] = dc_corrida_pot[escoria['Corrida'][i]]
    escoria['coating'][i] = dc_corrida_coat[escoria['Corrida'][i]]

escoria

lista_colunas_escoria = []
for i in range(escoria.shape[1]):
  lista_colunas_escoria.append(escoria.columns.values[i])

for atributo in [ 'S', 'Al2O3', 'BAS', 'CaO',   'Cr2O3', 'F', 'FeO', 'MgO', 'MnO', 'P2O5', 'RESIDUAL', 'SiO2', 'TOTAL',
       'TiO2',  'aco_vazado_t',       'energia_kwh/t', 'o2_ppm',       'tempo_forno_ligado_minutos', 'potencia_MW']:
  virgula_ponto(escoria[atributo])
  remove_espaci(escoria[atributo])
  remove_parentese(escoria[atributo])
  converte_para_numero(escoria[atributo])

escoria

aux = []
for i in range(escoria.shape[0]):
  a = escoria['Cal_total'][i]
  aux.append(a)

aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
    aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)

escoria['Cal_total'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['calcitica_kg'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
    aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['calcitica_kg'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['dolomitica_kg'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
    aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['dolomitica_kg'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['S'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['S'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['Al2O3'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['Al2O3'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['CaO'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['CaO'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['BAS'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['BAS'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['Cr2O3'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['Cr2O3'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['F'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['F'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['FeO'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['FeO'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['MgO'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['MgO'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['MnO'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['MnO'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['P2O5'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['P2O5'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['RESIDUAL'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['RESIDUAL'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['SiO2'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['SiO2'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['TOTAL'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['TOTAL'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['TiO2'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['TiO2'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['aco_vazado_t'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['aco_vazado_t'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['energia_kwh/t'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['energia_kwh/t'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['o2_ppm'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['o2_ppm'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['tempo_forno_ligado_minutos'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['tempo_forno_ligado_minutos'] = aux2

aux = []
for i in range(escoria.shape[0]):
  a = escoria['potencia_MW'][i]
  aux.append(a)
aux2 = []
for i in range(len(aux)):
  if aux[i]=="":
      aux[i] = 0.0
  a = float(aux[i])
  aux2.append(a)
escoria['potencia_MW'] = aux2

escoria.columns

filtro = [ 'S', 'Al2O3', 'BAS', 'CaO',   'Cr2O3', 'F', 'FeO', 'MgO', 'MnO', 'P2O5', 'RESIDUAL', 'SiO2', 'TOTAL',
       'TiO2',  'Cal_total', 'aco_vazado_t',
       'energia_kwh/t', 'calcitica_kg', 'dolomitica_kg', 'o2_ppm',
       'tempo_forno_ligado_minutos', 'potencia_MW']

escoria[filtro].corr()

escoria.shape

escoria = escoria[escoria['CaO']<=100]
escoria = escoria[escoria['S']<=100]
escoria = escoria[escoria['Cr2O3']<=100]
escoria = escoria[escoria['F']<=100]
escoria = escoria[escoria['FeO']<=100]
escoria = escoria[escoria['MgO']<=100]
escoria = escoria[escoria['MnO']<=100]
escoria = escoria[escoria['P2O5']<=100]
escoria = escoria[escoria['SiO2']<=100]
escoria = escoria[escoria['TOTAL']<=100]
escoria = escoria[escoria['TiO2']<=100]
escoria = escoria[escoria['BAS']<10]

escoria = escoria[escoria['CaO']>0]
escoria = escoria[escoria['S']>0]
escoria = escoria[escoria['FeO']>0]
escoria = escoria[escoria['MgO']>0]
escoria = escoria[escoria['MnO']>0]
escoria = escoria[escoria['P2O5']>0]
escoria = escoria[escoria['SiO2']>0]
escoria = escoria[escoria['TOTAL']>00]

sns.scatterplot(x = 'Cal_total',y = 'CaO',data = escoria)

escoria.shape

sns.boxplot(x= 'Classification',y = 'CaO',data = escoria[escoria['Turma']!=""],hue = 'Turma')
plt.ylim()

escoria[filtro].corr()

sns.boxplot(x = 'Classification',y = 'CaO',data = escoria)
plt.ylim([15,40])
plt.title('Teor de CaO na escória por classe de aço \n',fontsize = 14)
plt.xlabel('\n Classe de aço',fontsize = 12)
plt.ylabel('CaO (%)\n',fontsize = 12)

sns.boxplot(x = 'Classification',y = 'SiO2',data = escoria)
plt.ylim([5,20])
plt.title('Teor de SiO2 na escória por classe de aço \n',fontsize = 14)
plt.xlabel('\n Classe de aço',fontsize = 12)
plt.ylabel('SiO2 (%)\n',fontsize = 12)

sns.boxplot(x = 'Classification',y = 'S',data = escoria)
plt.ylim([0.0,0.2])
plt.title('Teor de S na escória por classe de aço \n',fontsize = 14)
plt.xlabel('\n Classe de aço',fontsize = 12)
plt.ylabel('S (%)\n',fontsize = 12)

sns.boxplot(x = 'Classification',y = 'BAS',data = escoria)
plt.ylim([1,4])
plt.title('Basicidade da escória por classe de aço \n',fontsize = 14)
plt.xlabel('\n Classe de aço',fontsize = 12)
plt.ylabel('Basicidade\n',fontsize = 12)

sns.boxplot(x = 'Classification',y = 'P2O5',data = escoria)
plt.ylim([0,2.5])
plt.title('Teor de P2O5 na escória por classe de aço \n',fontsize = 14)
plt.xlabel('\n Classe de aço',fontsize = 12)
plt.ylabel('P2O5 (%)\n',fontsize = 12)

sns.boxplot(x = 'Classification',y = 'MgO',data = escoria)
plt.ylim([0,15])
plt.title('Teor de MgO na escória por classe de aço \n',fontsize = 14)
plt.xlabel('\n Classe de aço',fontsize = 12)
plt.ylabel('MgO (%)\n',fontsize = 12)

sns.scatterplot(x = 'Cal_total',y= 'S',data =  escoria, hue = 'Classification')
plt.ylim([0,0.5])
plt.xlim([0,15000])

escoria

escoria['CaO+MgO'] = escoria['CaO']+escoria['MgO']

sns.boxplot(x = 'Classification',y = 'CaO+MgO',data = escoria)
plt.ylim([20,45])
plt.title('Teor de CaO + MgO na escória por classe de aço \n',fontsize = 14)
plt.xlabel('\n Classe de aço',fontsize = 12)
plt.ylabel('CaO + MgO (%)\n',fontsize = 12)

sns.boxplot(x = 'Classification',y = 'MnO',data = escoria)
plt.ylim([3,12])
plt.title('Teor de MnO na escória por classe de aço \n',fontsize = 14)
plt.xlabel('\n Classe de aço',fontsize = 12)
plt.ylabel('MnO (%)\n',fontsize = 12)

sns.boxplot(x = 'Classification',y = 'FeO',data = escoria)
plt.ylim([15,50])
plt.title('Teor de FeO na escória por classe de aço \n',fontsize = 14)
plt.xlabel('\n Classe de aço',fontsize = 12)
plt.ylabel('FeO (%)\n',fontsize = 12)

sns.boxplot(x = 'Classification',y = 'Al2O3',data = escoria)
plt.ylim([0,10])
plt.title('Teor de Al2O3 na escória por classe de aço \n',fontsize = 14)
plt.xlabel('\n Classe de aço',fontsize = 12)
plt.ylabel('Al2O3 (%)\n',fontsize = 12)

escoria['SiO2+Al2O3'] = escoria['Al2O3']+escoria['SiO2']

sns.boxplot(x = 'Classification',y = 'SiO2+Al2O3',data = escoria)
plt.ylim([8,30])
plt.title('Teor de SiO2 + Al2O3 na escória por classe de aço \n',fontsize = 14)
plt.xlabel('\n Classe de aço',fontsize = 12)
plt.ylabel('SiO2 + Al2O3 (%)\n',fontsize = 12)

escoria_comum = escoria[escoria['Classification'] =='Comum']

escoria_comum.set_axis(range(escoria_comum.shape[0]),axis = 'index',inplace = True)

escoria_comum.corr()

escoria.shape

escoria_comum.corr()

sns.boxplot(x = 'Turma',y = 'CaO',data = escoria_comum[escoria_comum['Turma']!=""])
plt.ylim([15,35])
plt.title('Teor de CaO na escória de aços comuns por turma \n',fontsize = 14)
plt.xlabel('\n Turma',fontsize = 12)
plt.ylabel('CaO (%)\n',fontsize = 12)

sns.boxplot(x = 'Turma',y = 'SiO2',data = escoria_comum[escoria_comum['Turma']!=""])
plt.ylim([8,20])
plt.title('Teor de SiO2 na escória de aços comuns por turma \n',fontsize = 14)
plt.xlabel('\n Turma',fontsize = 12)
plt.ylabel('SiO2 (%)\n',fontsize = 12)

sns.boxplot(x = 'Turma',y = 'Al2O3',data = escoria_comum[escoria_comum['Turma']!=""])
plt.ylim([0,10])
plt.title('Teor de Al2O3 na escória de aços comuns por turma \n',fontsize = 14)
plt.xlabel('\n Turma',fontsize = 12)
plt.ylabel('Al2O3 (%)\n',fontsize = 12)

sns.boxplot(x = 'Turma',y = 'MgO',data = escoria_comum[escoria_comum['Turma']!=""])
plt.ylim([2,12])
plt.title('Teor de MgO na escória de aços comuns por turma \n',fontsize = 14)
plt.xlabel('\n Turma',fontsize = 12)
plt.ylabel('MgO (%)\n',fontsize = 12)

sns.boxplot(x = 'Turma',y = 'S',data = escoria_comum[escoria_comum['Turma']!=""])
plt.ylim([0,0.15])
plt.title('Teor de S na escória de aços comuns por turma \n',fontsize = 14)
plt.xlabel('\n Turma',fontsize = 12)
plt.ylabel('S (%)\n',fontsize = 12)

sns.boxplot(x = 'Turma',y = 'P2O5',data = escoria_comum[escoria_comum['Turma']!=""])
plt.ylim([0,2.5])
plt.title('Teor de P2O5 na escória de aços comuns por turma \n',fontsize = 14)
plt.xlabel('\n Turma',fontsize = 12)
plt.ylabel('P2O5 (%)\n',fontsize = 12)

sns.boxplot(x = 'Turma',y = 'FeO',data = escoria_comum[escoria_comum['Turma']!=""])
plt.ylim([15,50])
plt.title('Teor de FeO na escória de aços comuns por turma \n',fontsize = 14)
plt.xlabel('\n Turma',fontsize = 12)
plt.ylabel('FeO (%)\n',fontsize = 12)

sns.boxplot(x = 'Turma',y = 'MnO',data = escoria_comum[escoria_comum['Turma']!=""])
plt.ylim([4,12])
plt.title('Teor de MnO na escória de aços comuns por turma \n',fontsize = 14)
plt.xlabel('\n Turma',fontsize = 12)
plt.ylabel('MnO (%)\n',fontsize = 12)

sns.boxplot(x = 'Turma',y = 'BAS',data = escoria_comum[escoria_comum['Turma']!=""])
plt.ylim([1,2.5])
plt.title('Basicidade da escória de aços comuns por turma \n',fontsize = 14)
plt.xlabel('\n Turma',fontsize = 12)
plt.ylabel('Basicidade\n',fontsize = 12)

sns.scatterplot(x = 'MgO', y = 'o2_ppm',data = escoria_comum[escoria_comum['o2_ppm']>100])

escoria_comum.corr()

lista  = []
cal_total_lista = []
for coluna in escoria_comum.columns:
    aux = []
    aux2 = []
    for i in range(escoria_comum.shape[0]):
      if escoria[coluna].values[i] == 0:
        continue
      aux2.append((escoria_comum['Cal_total'].values[i]))
      aux.append(escoria_comum[coluna].values[i])
    lista.append(aux)
    cal_total_lista.append(aux2)

for i in range(escoria.shape[1]):
  colunas[i] = escoria_comum.columns[i]

for i in range(4,len(lista)):
  if cal_total_lista[i] == []:
    continue
  if i == 18 or i==19:
    continue
  if i == 28:
    continue
  X = cal_total_lista[i]
  X = np.array(X)
  X = X.astype(float)
  X = sm.add_constant(X)
  Y = lista[i]
  Y = np.array(Y)
  Y = Y.astype(float)
  print('x = '+ colunas[i]+' y = Cal total')
  modelo = sm.OLS(Y,X)
  resultado = modelo.fit()
  print(resultado.summary())

for i in range(escoria.shape[1]):
  plt.figure()
  sns.scatterplot(x = cal_total_lista[i],y = lista[i])
  plt.xlabel('\n Cal total (kg)',fontsize = 12)
  plt.ylabel(colunas[i]+' (%)\n',fontsize = 12)
  plt.title(colunas[i] + ' versus Cal total \n', fontsize = 14)

len(cal_total_lista)

len(lista[0])



"""#Parte 2 do trabalho"""

especial_processo = FEA_1[FEA_1['Classification'] == 'Especial']
intermediario_processo = FEA_1[FEA_1['Classification'] == 'Intermediario']

q1_intermediario_processo = intermediario_processo['Cal_total'].quantile(0.25)
q3_intermediario_processo = intermediario_processo['Cal_total'].quantile(0.75)
Iq_intermediario_processo = q3 - q1
lim_inf_intermediario_processo = q1 - 1.5*Iq_intermediario_processo
lim_sup_intermediario_processo = q3 + 1.5*Iq_intermediario_processo

lim_sup_intermediario_processo

intermediario_processo =intermediario_processo[intermediario_processo['Cal_total']>lim_inf_intermediario_processo]
intermediario_processo =intermediario_processo[intermediario_processo['Cal_total']<lim_sup_intermediario_processo]

intermediario_processo

q1_especial_processo = especial_processo['Cal_total'].quantile(0.25)
q3_especial_processo = especial_processo['Cal_total'].quantile(0.75)
Iq_especial_processo = q3 - q1
lim_inf_especial_processo = q1 - 1.5*Iq_especial_processo
lim_sup_especial_processo = q3 + 1.5*Iq_especial_processo

especial_processo

especial_processo.set_axis(range(especial_processo.shape[0]),axis= 'index',inplace = True)

intermediario_processo.set_axis(range(intermediario_processo.shape[0]),axis= 'index',inplace = True)

FEA_1_sem_outliers = pd.concat([acos_comuns_sem_outliers,intermediario_processo,especial_processo,],ignore_index=True)

sns.boxplot(x = 'Classification',y = 'Cal_total',data = FEA_1_sem_outliers)
plt.ylim([2000,9000])

FEA_1_sem_outliers

FEA_1_sem_outliers.columns

itens_analisados =  [ 'Aco',  'Turma','Consumo de Energia Elétrica (kWh/t)',
       'kg SiO2 esperada /t', 'kg SiO2 extra /t', 'Peso Carregado (t/cor)',
        'GUSS (t/cor)', 'SHRE (t/cor)', 'Gusa Eqv.', 'O2 / GUSSEQ',
       'Densidade Teórica [t/m³]', 
        'Peso Escória (kg/t)', 'Coque Injetado [kg]',
        'Oxigênio FEA (m³/t)','Gás Natural (m³/t)', 'Pé Liquido (t) Corrigido', 'Coating de Panela',
       'Temperatura de Vazamento Forno (°C)', 'PPM O2 vazamento',
       'Calcitica (kg) 7071955','Dolomitica (kg) 7071957', 'Classification', 'Cales_total_kg',
       'Cal_total']

FEA_1_sem_outliers_itens_analisados = FEA_1_sem_outliers[itens_analisados]

FEA_1_sem_outliers_itens_analisados

FEA_1_sem_outliers_itens_analisados

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['kg SiO2 esperada /t'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['kg SiO2 esperada /t'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['kg SiO2 extra /t'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['kg SiO2 extra /t'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['Peso Carregado (t/cor)'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['Peso Carregado (t/cor)'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['GUSS (t/cor)'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['GUSS (t/cor)'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['SHRE (t/cor)'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['SHRE (t/cor)'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['Gusa Eqv.'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['Gusa Eqv.'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['Densidade Teórica [t/m³]'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['Densidade Teórica [t/m³]'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['Peso Escória (kg/t)'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['Peso Escória (kg/t)'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['Oxigênio FEA (m³/t)'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['Oxigênio FEA (m³/t)'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['Gás Natural (m³/t)'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['Gás Natural (m³/t)'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['Pé Liquido (t) Corrigido'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['Pé Liquido (t) Corrigido'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['PPM O2 vazamento'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['PPM O2 vazamento'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['Cal_total'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['Cal_total'] = aux_lista

aux_lista = []
for i in range(FEA_1_sem_outliers_itens_analisados.shape[0]):
  a = FEA_1_sem_outliers_itens_analisados['Consumo de Energia Elétrica (kWh/t)'][i]
  if type(a) == type(6.0):
    aux_lista.append(a)
    continue
  if type(a) == type(6):
    a = float(a)
    aux_lista.append(a)
    continue
  if a == "":
    a = 0.0
    aux_lista.append(a)
    continue
  a = a.strip()
  a = a.replace(',','.')
  a = float(a)
  aux_lista.append(a)
FEA_1_sem_outliers_itens_analisados['Consumo de Energia Elétrica (kWh/t)'] = aux_lista

FEA_1_sem_outliers_itens_analisados

FEA_1_sem_outliers_itens_analisados['Cal_total/peso'] =FEA_1_sem_outliers_itens_analisados['Cal_total'] / FEA_1_sem_outliers_itens_analisados['Peso Carregado (t/cor)']

sns.boxplot(x = 'Classification', y = 'Gusa Eqv.', data= FEA_1_sem_outliers_itens_analisados)
plt.ylim()
plt.title("Adições de Cal por Classe de Aço \n",fontsize = 14)
plt.xlabel("\n Classificação",fontsize = 12)
plt.ylabel("Cal adicionada (kg/ton) \n",fontsize = 12)

FEA_1_sem_outliers_itens_analisados['gusa_carga'] =(FEA_1_sem_outliers_itens_analisados['GUSS (t/cor)'] / FEA_1_sem_outliers_itens_analisados['Peso Carregado (t/cor)']*100.00)

sns.boxplot(x = 'Classification', y = 'gusa_carga', data= FEA_1_sem_outliers_itens_analisados)
plt.ylim([15,35])
plt.title("Percentual de Gusa na Carga por Classe de Aço\n",fontsize = 14)
plt.xlabel("\n Classificação",fontsize = 12)
plt.ylabel("Gusa na carga (%) \n",fontsize = 12)

especiais_processo = FEA_1_sem_outliers_itens_analisados[FEA_1_sem_outliers_itens_analisados['Classification'] == 'Especial']
intermediario_processo = FEA_1_sem_outliers_itens_analisados[FEA_1_sem_outliers_itens_analisados['Classification'] == 'Comum']
comum_processo = FEA_1_sem_outliers_itens_analisados[FEA_1_sem_outliers_itens_analisados['Classification'] == 'Intermediario']

q1_comum = comum_processo['gusa_carga'].quantile(0.25)
q3_comum = comum_processo['gusa_carga'].quantile(0.75)
Iq_comum = q3_comum - q1_comum
LI_comum = q1_comum - 1.5*Iq_comum
LS_comum = q3_comum + 1.5*Iq_comum
(round(LI_comum,2),round(LS_comum,2))

q1_intermediario = intermediario_processo['gusa_carga'].quantile(0.25)
q3_intermediario = intermediario_processo['gusa_carga'].quantile(0.75)
Iq_intermediario = q3_intermediario - q1_intermediario
LI_intermediario = q1_intermediario - 1.5*Iq_intermediario
LS_intermediario = q3_intermediario + 1.5*Iq_intermediario
(round(LI_intermediario,2),round(LS_intermediario,2))

q1_especiais = especiais_processo['gusa_carga'].quantile(0.25)
q3_especiais = especiais_processo['gusa_carga'].quantile(0.75)
Iq_especiais = q3_especiais - q1_especiais
LI_especiais = q1_especiais - 1.5*Iq_especiais
LS_especiais = q3_especiais + 1.5*Iq_especiais
(round(LI_especiais,2),round(LS_especiais,2))

FEA_1_sem_outliers_itens_analisados

sns.boxplot(x = 'Classification', y = 'Peso Escória (kg/t)', data= FEA_1_sem_outliers_itens_analisados[FEA_1_sem_outliers_itens_analisados['Peso Escória (kg/t)']!=0])
plt.ylim([0,2.5])
plt.title("Peso de Escória Gerado por Classe de Aço\n",fontsize = 14)
plt.xlabel("\n Classificação",fontsize = 12)
plt.ylabel("Peso de escória (kg/t) \n",fontsize = 12)

sns.boxplot(x = 'Classification', y = 'Consumo de Energia Elétrica (kWh/t)', data= FEA_1_sem_outliers_itens_analisados[FEA_1_sem_outliers_itens_analisados['Consumo de Energia Elétrica (kWh/t)']!=0])
plt.ylim([250,450])
plt.title("Consumo de Oxigênio por Classe de Aço\n",fontsize = 14)
plt.xlabel("\n Classificação",fontsize = 12)
plt.ylabel("Oxigênio FEA (m³/t) \n",fontsize = 12)

FEA_1_sem_outliers_itens_analisados.corr()

sns.scatterplot(x ='Oxigênio FEA (m³/t)',y = 'Gás Natural (m³/t)',data = FEA_1_sem_outliers_itens_analisados)
plt.ylim([0,10])
plt.xlim([15,100])

